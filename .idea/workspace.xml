<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="a8778f82-01df-447e-b6f1-009901c34411" name="Changes" comment="finish adjustments">
      <change afterPath="$PROJECT_DIR$/Api/.dockerignore" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/.idea/.idea.Api/.idea/.gitignore" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/.idea/.idea.Api/.idea/encodings.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/Api.csproj" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/Api.http" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/Api.sln" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/Dockerfile" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/Models/CreateDeploymentRequest.cs" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/Program.cs" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/Properties/launchSettings.json" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/appsettings.Development.json" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/appsettings.json" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/Api.csproj.nuget.dgspec.json" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/Api.csproj.nuget.g.props" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/Api.csproj.nuget.g.targets" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/Debug/net9.0/Api.AssemblyInfo.cs" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/Debug/net9.0/Api.AssemblyInfoInputs.cache" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/Debug/net9.0/Api.GeneratedMSBuildEditorConfig.editorconfig" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/Debug/net9.0/Api.GlobalUsings.g.cs" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/Debug/net9.0/Api.assets.cache" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/Debug/net9.0/Api.csproj.AssemblyReference.cache" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/project.assets.json" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/project.nuget.cache" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/project.packagespec.json" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/rider.project.model.nuget.info" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Api/obj/rider.project.restore.info" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.dockerignore" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/.dockerignore" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/.gitignore" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.golangci.yml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/.golangci.yml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Dockerfile" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/Dockerfile" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Makefile" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/Makefile" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/PROJECT" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/PROJECT" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/README.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/api/v1/containerdeployment_types.go" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/api/v1/containerdeployment_types.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/api/v1/groupversion_info.go" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/api/v1/groupversion_info.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/api/v1/zz_generated.deepcopy.go" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/api/v1/zz_generated.deepcopy.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/build-and-deploy.sh" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/build-and-deploy.sh" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/cmd/main.go" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/cmd/main.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/crd/bases/apps.com.coding-monkey_containerdeployments.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/crd/bases/apps.com.coding-monkey_containerdeployments.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/crd/kustomization.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/crd/kustomization.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/crd/kustomizeconfig.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/crd/kustomizeconfig.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/default/kustomization.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/default/kustomization.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/default/manager_metrics_patch.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/default/manager_metrics_patch.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/default/metrics_service.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/default/metrics_service.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/manager/kustomization.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/manager/kustomization.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/manager/manager.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/manager/manager.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/network-policy/allow-metrics-traffic.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/network-policy/allow-metrics-traffic.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/network-policy/kustomization.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/network-policy/kustomization.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/prometheus/kustomization.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/prometheus/kustomization.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/prometheus/monitor.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/prometheus/monitor.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/containerdeployment_editor_role.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/containerdeployment_editor_role.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/containerdeployment_viewer_role.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/containerdeployment_viewer_role.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/kustomization.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/kustomization.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/leader_election_role.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/leader_election_role.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/leader_election_role_binding.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/leader_election_role_binding.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/metrics_auth_role.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/metrics_auth_role.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/metrics_auth_role_binding.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/metrics_auth_role_binding.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/metrics_reader_role.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/metrics_reader_role.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/role.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/role.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/role_binding.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/role_binding.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/rbac/service_account.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/rbac/service_account.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/samples/apps_v1_containerdeployment.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/samples/apps_v1_containerdeployment.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/samples/hello-world.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/samples/hello-world.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/samples/hello-world2.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/samples/hello-world2.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/samples/ingress-with-all-envs.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/samples/ingress-with-all-envs.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/samples/ingress-with-minimum-envs.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/samples/ingress-with-minimum-envs.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/samples/ingress.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/samples/ingress.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/samples/ingress2.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/samples/ingress2.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/samples/ingress3.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/samples/ingress3.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/samples/kustomization.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/samples/kustomization.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/config/samples/secret-example.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/config/samples/secret-example.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/demo-deployment.sh" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/demo-deployment.sh" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/go.mod" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/go.mod" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/go.sum" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/go.sum" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/hack/boilerplate.go.txt" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/hack/boilerplate.go.txt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/controller/containerdeployment_controller.go" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/internal/controller/containerdeployment_controller.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/controller/containerdeployment_controller_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/internal/controller/containerdeployment_controller_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/controller/suite_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/internal/controller/suite_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/cert-manager/Readme.md" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/cert-manager/Readme.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/cert-manager/certificates/production/codingmonkey-cloud.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/cert-manager/certificates/production/codingmonkey-cloud.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/cert-manager/certificates/staging/codingmonkey-cloud.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/cert-manager/certificates/staging/codingmonkey-cloud.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/cert-manager/cloudflare-credentials.example.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/cert-manager/cloudflare-credentials.example.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/cert-manager/issuers/lets-encrypt-production.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/cert-manager/issuers/lets-encrypt-production.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/cert-manager/issuers/lets-encrypt-staging.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/cert-manager/issuers/lets-encrypt-staging.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/cert-manager/setup.sh" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/cert-manager/setup.sh" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/cert-manager/values.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/cert-manager/values.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/kata/runtime-class.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/kata/runtime-class.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/nginx/deploy.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/nginx/deploy.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/nginx/ingress.yaml" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/nginx/ingress.yaml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/kubernetes-setup/traefik/install.sh" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/kubernetes-setup/traefik/install.sh" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/minikube_katas_setup.sh" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/minikube_katas_setup.sh" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/e2e/e2e_suite_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/test/e2e/e2e_suite_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/e2e/e2e_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/test/e2e/e2e_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/utils/utils.go" beforeDir="false" afterPath="$PROJECT_DIR$/kubernetes/test/utils/utils.go" afterDir="false" />
    </list>
    <list id="f4ac63b7-cc66-4d06-b3c4-ffdb20f510af" name="Changes by flori" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="GOROOT" url="file:///usr/local/go" />
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="main" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;CodingMonkeyN&quot;
  }
}</component>
  <component name="GitToolBoxStore">
    <option name="recentBranches">
      <RecentBranches>
        <option name="branchesForRepo">
          <list>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="portal" />
                    <option name="lastUsedInstant" value="1736347582" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1729433838" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$" />
            </RecentBranchesForRepo>
          </list>
        </option>
      </RecentBranches>
    </option>
  </component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/CodingMonkeyN/container-as-a-service.git&quot;,
    &quot;accountId&quot;: &quot;3236060b-dff0-4916-857e-b8f1302c191b&quot;
  }
}</component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$USER_HOME$/go/pkg/mod/k8s.io/api@v0.31.0/core/v1/types.go" root0="SKIP_INSPECTION" />
  </component>
  <component name="KubernetesApiPersistence">{}</component>
  <component name="KubernetesApiProvider">{
  &quot;isMigrated&quot;: true
}</component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="2nhhrkjHslr06uKW75TQ46dsSsd" />
  <component name="ProjectViewState">
    <option name="autoscrollFromSource" value="true" />
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showExcludedFiles" value="false" />
    <option name="showLibraryContents" value="true" />
    <option name="showMembers" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Go Build.go build github.com/CodingMonkeyN/container-as-a-service.executor": "Debug",
    "Go Build.go build github.com/CodingMonkeyN/container-as-a-service/cmd.executor": "Debug",
    "Go Test.go test container-as-a-service.executor": "Debug",
    "Go Test.go test controller.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.go.formatter.settings.were.checked": "true",
    "RunOnceActivity.go.migrated.go.modules.settings": "true",
    "RunOnceActivity.go.modules.go.list.on.any.changes.was.set": "true",
    "dart.analysis.tool.window.visible": "false",
    "git-widget-placeholder": "portal",
    "go.import.settings.migrated": "true",
    "go.sdk.automatically.set": "true",
    "last_opened_file_path": "/Users/CodingMonkey/Documents/Repos/container-as-a-service/kubernetes-setup/cert-manager",
    "node.js.detected.package.eslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "settings.editor.selected.configurable": "actions.on.save"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/kubernetes-setup/cert-manager" />
      <recent name="$PROJECT_DIR$/kubernetes-setup/ingress" />
      <recent name="$PROJECT_DIR$" />
      <recent name="$PROJECT_DIR$/config/samples" />
      <recent name="$PROJECT_DIR$/kubernetes-setup/cert-manager/issuers" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/kubernetes-setup/cert-manager" />
      <recent name="$PROJECT_DIR$/kubernetes-setup/ingress" />
    </key>
  </component>
  <component name="RunManager" selected="Go Build.go build github.com/CodingMonkeyN/container-as-a-service/cmd">
    <configuration name="go build github.com/CodingMonkeyN/container-as-a-service/cmd" type="GoApplicationRunConfiguration" factoryName="Go Application" nameIsGenerated="true">
      <module name="container-as-a-service" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <package value="github.com/CodingMonkeyN/container-as-a-service" />
      <directory value="$PROJECT_DIR$/cmd" />
      <filePath value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="go test controller" type="GoTestRunConfiguration" factoryName="Go Test" nameIsGenerated="true">
      <module name="container-as-a-service" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="DIRECTORY" />
      <package value="github.com/CodingMonkeyN/container-as-a-service" />
      <directory value="$PROJECT_DIR$/internal/controller" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Go Build.go build github.com/CodingMonkeyN/container-as-a-service/cmd" />
      <item itemvalue="Go Test.go test controller" />
    </list>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-gosdk-5df93f7ad4aa-df9ad98b711f-org.jetbrains.plugins.go.sharedIndexes.bundled-GO-242.23339.24" />
        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-GO-242.23339.24" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="first commit" />
    <MESSAGE value="bissel getestet" />
    <MESSAGE value="rename demo deployment" />
    <MESSAGE value="ingress setup" />
    <MESSAGE value="add pvc" />
    <MESSAGE value="add week2 demo" />
    <MESSAGE value="add cert-manager setup" />
    <MESSAGE value="finish cert-manager and ingress setup" />
    <MESSAGE value="prepare demo" />
    <MESSAGE value="disable service links" />
    <MESSAGE value="override default kubernetes environments" />
    <MESSAGE value="add config for min and max env" />
    <MESSAGE value="change pull policy" />
    <MESSAGE value="fix build to always use linux/amd64" />
    <MESSAGE value="reactivate runtime class" />
    <MESSAGE value="try envtest" />
    <MESSAGE value="add missing cluster role configs" />
    <MESSAGE value="add integration tests" />
    <MESSAGE value="add test to check the correct envs" />
    <MESSAGE value="update resources when doing an update" />
    <MESSAGE value="adjust configuration" />
    <MESSAGE value="finish adjustments" />
    <option name="LAST_COMMIT_MESSAGE" value="finish adjustments" />
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
</project>